<%@ page contentType="text/html; charset=UTF-8" language="java"%>
<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>Foro Hacker - Laboratorio XSS</title>
<style>
/* Fuente consola */
body {
	background-color: #0d1117;
	font-family: 'Courier New', monospace;
	color: #e6edf3;
	margin: 0;
	padding: 0;
	display: flex;
	flex-direction: column;
	height: 100vh;
}

/* HEADER estilo ventana */
.window-header {
	display: flex;
	justify-content: space-between;
	align-items: center;
	background: #161b22;
	border-bottom: 1px solid #30363d;
	padding: 10px 20px;
}

.title-bar {
	display: flex;
	align-items: center;
	gap: 15px;
}

.title-bar h1 {
	font-size: 1.2rem;
	color: #00ffcc;
}

.logo {
	width: 30px;
	height: 30px;
}

.window-controls {
	display: flex;
	gap: 10px;
}

.win-btn {
	background: #21262d;
	border: none;
	color: #e6edf3;
	width: 30px;
	height: 30px;
	font-size: 1rem;
	cursor: pointer;
	border-radius: 4px;
}

.win-btn:hover {
	background-color: #30363d;
}

/* COMENTARIOS */
.forum-container {
	padding: 20px;
	max-width: 800px;
	margin: auto;
	flex-grow: 1;
	overflow-y: auto;
}

.comment-box {
	background: #161b22;
	border: 1px solid #30363d;
	border-radius: 8px;
	padding: 15px;
	margin-bottom: 20px;
	width: 100%;
	box-sizing: border-box;
}

.user-info {
	display: flex;
	align-items: center;
	gap: 10px;
	font-size: 0.85rem;
	color: #8b949e;
	margin-bottom: 10px;
}

.avatar {
	width: 28px;
	height: 28px;
	border-radius: 50%;
}

.username {
	font-weight: bold;
	color: #58a6ff;
}

.comment-text {
	font-size: 0.95rem;
	margin-bottom: 10px;
}

.comment-actions button {
	background: none;
	border: none;
	color: #8b949e;
	cursor: pointer;
	font-size: 0.85rem;
	margin-right: 10px;
}

.comment-actions button:hover {
	color: #00ffcc;
}

/* BOT√ìN DE SOLUCI√ìN */
.solution-btn {
	position: fixed;
	bottom: 10px;
	left: 10px;
	background: radial-gradient(circle, #00ffcc, #0077ff);
	color: #000;
	border: none;
	font-size: 1.5rem;
	border-radius: 50%;
	width: 50px;
	height: 50px;
	cursor: pointer;
	box-shadow: 0 0 10px #00ffcc99;
	transition: transform 0.2s ease;
	z-index: 1000;
}

.solution-btn:hover {
	transform: scale(1.1);
}

/* POPUP */
.popup {
	position: fixed;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%) scale(1);
	background-color: #0d1117;
	border: 1px solid #30363d;
	border-radius: 10px;
	padding: 20px;
	width: 400px;
	max-width: 90%;
	z-index: 1000;
	font-family: 'Courier New', monospace;
	box-shadow: 0 0 15px #00ffcc4f;
	animation: popupFade 0.3s ease-in-out;
}

.popup-header {
	display: flex;
	justify-content: space-between;
	align-items: center;
	border-bottom: 1px solid #30363d;
	padding-bottom: 10px;
	margin-bottom: 15px;
}

.popup-header h2 {
	color: #00ffcc;
	font-size: 1.2rem;
}

.close-btn {
	background: none;
	border: none;
	color: #ff4d4d;
	font-size: 1.2rem;
	cursor: pointer;
}

.popup-content {
	color: #e6edf3;
	font-size: 0.95rem;
	margin-bottom: 20px;
}

.btn-solution {
	background: linear-gradient(90deg, #00ffcc, #0077ff);
	border: none;
	padding: 10px 20px;
	color: black;
	font-weight: bold;
	border-radius: 6px;
	cursor: pointer;
	text-transform: uppercase;
	transition: transform 0.2s ease;
}

.btn-solution:hover {
	transform: scale(1.05);
}

@
keyframes popupFade {from { opacity:0;
	transform: translate(-50%, -50%) scale(0.9);
}

to {
	opacity: 1;
	transform: translate(-50%, -50%) scale(1);
}

}
.hidden {
	display: none;
}

/* Barra de comentarios */
.comment-form {
	background-color: #161b22;
	padding: 15px;
	border-top: 1px solid #30363d;
	display: flex;
	align-items: center;
	gap: 10px;
	width: 100%; /* Contenedor padre al 100% */
	box-sizing: border-box; /* Para evitar el desbordamiento */
	z-index: 2;
	justify-content: center;
}

.comment-form input {
	width: 50%; /* Ajustado para ocupar solo el 50% del ancho */
	padding: 10px;
	background-color: #21262d;
	border: 1px solid #30363d;
	color: #e6edf3;
	border-radius: 5px;
	font-size: 1rem;
	box-sizing: border-box;
}

.comment-form button {
	background-color: #00ffcc;
	color: #000;
	border: none;
	padding: 10px;
	font-size: 1rem;
	border-radius: 5px;
	cursor: pointer;
}

.comment-form button:hover {
	background-color: #0077ff;
}

.comment-form button.solution-btn {
	background-color: #ffeb3b;
}

/* Ventana emergente tipo Google */
.popup-xss {
	position: fixed;
	top: 10px;
	left: 50%;
	transform: translateX(-50%);
	background-color: #21262d;
	color: #e6edf3;
	border: 1px solid #30363d;
	border-radius: 5px;
	padding: 15px;
	width: 80%;
	max-width: 500px;
	box-shadow: 0 0 15px rgba(0, 255, 204, 0.5);
	font-family: 'Courier New', monospace;
	z-index: 1000;
	display: none;
	text-align: center; /* Centrado horizontal */
}

.popup-xss h2 {
	font-size: 1rem;
	margin: 0;
}

.popup-xss p {
	margin: 10px 0;
	font-size: 1.2rem;
	font-weight: bold;
}

.popup-xss button {
	background: none;
	border: none;
	color: #ff4d4d;
	font-size: 1.5rem;
	cursor: pointer;
	position: absolute;
	top: 10px;
	right: 10px;
}

.popup-xss button:hover {
	color: #ff0000;
}
</style>
</head>
<body>
	<header class="window-header">
		<div class="title-bar">
			<img src="logo.png" alt="Logo" class="logo" />
			<h1 id="page-title">Reflejo XSS - Laboratorio</h1>
		</div>
		<div class="window-controls">
			<button class="win-btn minimize">‚Äî</button>
			<button class="win-btn maximize">‚ñ°</button>
			<button class="win-btn close">‚úï</button>
		</div>
	</header>

	<div class="forum-container">
		<%-- Comentarios precargados de ejemplo (puedes reemplazar por bucles de Java si se conecta a base de datos) --%>
		<section class="comment-box">
			<div class="user-info">
				<img src="https://i.imgur.com/1X4R6Yt.png" alt="Avatar"
					class="avatar" /> <span class="username">DevMaster</span> ‚Ä¢ <span
					class="time">hace 10 minutos</span>
			</div>
			<p class="comment-text">¬øAlguien tiene un ejemplo de XSS en una
				p√°gina en vivo?</p>
			<div class="comment-actions">
				<button type="button">
					üëç <span class="like-count">3</span>
				</button>
				<button>Responder</button>
			</div>
		</section>
		<section class="comment-box">
			<div class="user-info">
				<img src="https://i.imgur.com/1X4R6Yt.png" alt="Avatar"
					class="avatar" /> <span class="username">Admin</span> ‚Ä¢ <span
					class="time">hace 5 minutos</span>
			</div>
			<p class="comment-text">¬°Recuerden que deben tener cuidado al
				ejecutar c√≥digos de fuentes desconocidas!</p>
			<div class="comment-actions">
				<button type="button">
					üëç <span class="like-count">5</span>
				</button>
				<button>Responder</button>
			</div>
		</section>
		<section class="comment-box">
			<div class="user-info">
				<img src="https://i.imgur.com/1X4R6Yt.png" alt="Avatar"
					class="avatar" /> <span class="username">Hacker123</span> ‚Ä¢ <span
					class="time">hace 2 minutos</span>
			</div>
			<p class="comment-text">Me parece que esto se podr√≠a explotar de
				una forma m√°s eficiente... ü§î</p>
			<div class="comment-actions">
				<button type="button">
					üëç <span class="like-count">2</span>
				</button>
				<button>Responder</button>
			</div>
		</section>
		<section class="comment-box">
			<div class="user-info">
				<img src="https://i.imgur.com/1X4R6Yt.png" alt="Avatar"
					class="avatar" /> <span class="username">T√∫</span> ‚Ä¢ <span
					class="time">hace 1 minuto</span>
			</div>
			<p class="comment-text">¬°Qu√© interesante tema! üëÄ</p>
			<div class="comment-actions">
				<button type="button">
					üëç <span class="like-count">0</span>
				</button>
				<button>Responder</button>
			</div>

			<div id="comments-list"></div>


		</section>
	</div>

	<!-- Barra de comentarios -->
	<form id="comment-form" class="comment-form">
		<input type="text" id="new-comment"
			placeholder="Escribe tu comentario..." />
		<button type="submit">Comentar</button>
		<button class="solution-btn" type="button" onclick="showPopup()">üí°</button>
	</form>

	<!-- Popup de soluci√≥n -->
	<div id="popup-solution" class="popup hidden">
		<div class="popup-header">
			<h2>üí° Soluci√≥n</h2>
			<button class="close-btn" onclick="closePopup()">‚úñ</button>
		</div>
		<div class="popup-content">
			<p>Este ejercicio demuestra una vulnerabilidad XSS reflejada. Si
				el script inyectado se ejecuta al enviarlo, el sistema no est√°
				sanitizando la entrada.</p>
		</div>
		<button class="btn-solution" onclick="closePopup()">Cerrar</button>
	</div>

	<script>
	
	 //Este c√≥digo implementa un sistema b√°sico de comentarios en una p√°gina web,
	 //donde los usuarios pueden escribir y publicar comentarios, ver otros comentarios, 
	 //dar "me gusta" y detectar posibles ataques de tipo XSS (Cross Site Scripting).
	 
	 //Vamos a desglosar paso a paso lo que hace cada parte del c√≥digo.
	 
	 //1. **Selecci√≥n de elementos del DOM:**
	 // Se seleccionan los elementos de la p√°gina para poder interactuar con ellos:
    // `commentForm`: Selecciona el formulario donde los usuarios escriben y env√≠an sus comentarios.
    // `newComment`: Selecciona el campo de texto donde el usuario escribe su comentario.
    // `forumContainer`: Es el contenedor donde se agregan los comentarios que los usuarios publican.
    // `popupMessage`: Este elemento muestra un mensaje emergente (popup) cuando se detecta un ataque XSS.
  
  	//2. **Funci√≥n detectarXSS (Prevenci√≥n de ataques XSS):**
    // Esta funci√≥n se usa para detectar si el texto que el usuario quiere publicar contiene c√≥digo JavaScript malicioso (XSS).
    // Se utiliza una expresi√≥n regular (regexXSS) que busca las etiquetas `<script>...<script>`, que es el tipo com√∫n de ataque XSS.
    // Si se detecta c√≥digo malicioso, se muestra un mensaje emergente (`popupMessage`) que advierte al usuario, y se detiene el proceso de publicaci√≥n del comentario.
    
    //3. **Funci√≥n escapeHTML (Escapando caracteres especiales):**
    // Esta funci√≥n toma el texto del comentario y lo convierte a un formato seguro para evitar que se ejecute como c√≥digo HTML.
    // Los caracteres especiales como `&`, `<`, `>`, `"`, y `'` son reemplazados por sus representaciones de entidad HTML correspondientes, como `&amp;`, `&lt;`, `&gt;`, etc.
    // Esto es importante para evitar que los usuarios puedan insertar c√≥digo malicioso que se ejecute en el navegador de otros usuarios.
    
    //4. **Manejo del env√≠o del comentario:**
    // Se escucha el evento `submit` del formulario. Esto significa que cuando el usuario hace clic en el bot√≥n para enviar su comentario, se ejecutar√° esta parte del c√≥digo.
    // El evento `e.preventDefault()` evita que la p√°gina se recargue al enviar el formulario (comportamiento por defecto en los formularios HTML).
    // El texto del comentario se obtiene de `newComment.value.trim()`, y `trim()` elimina los espacios innecesarios al principio y al final del texto.
    // Si el texto del comentario no est√° vac√≠o, el c√≥digo pasa a crear un nuevo bloque de comentario en la p√°gina.
    
    // 5. **Creaci√≥n din√°mica de un comentario:**
    // Se crea un nuevo `section` (etiqueta HTML) que representar√° el comentario. Este `section` tiene una clase llamada 'comment-box' para que se pueda estilizar con CSS.
    // Luego, se crea una estructura HTML que incluye:
    //   - **Informaci√≥n del usuario:** Una imagen de avatar, el nombre de usuario (`T√∫`) y el tiempo de publicaci√≥n (en este caso, 'hace pocos segundos').
    //   - **Texto del comentario:** El contenido del comentario, que se inserta usando `textContent` para asegurar que se muestra como texto simple y no como c√≥digo HTML.
    //   - **Acciones del comentario:** Un par de botones, uno para dar "me gusta" y otro para responder.
    // Todos estos elementos se a√±aden a la estructura del comentario y luego se inserta dentro de `forumContainer`, que es donde se muestran los comentarios en la p√°gina.
  
    // 6. **Incremento del contador de "me gusta":**
    // Cada vez que un usuario hace clic en el bot√≥n de "me gusta" (representado por un pulgar hacia arriba `üëç`), el contador de "me gusta" aumenta en 1.
    // Esto se logra con un `eventListener` en el `forumContainer`, que escucha si se hace clic en alg√∫n bot√≥n.
    // Si el clic es en el bot√≥n de "me gusta", el c√≥digo obtiene el n√∫mero actual de "me gusta" (de la etiqueta `span` que contiene la clase `like-count`), lo incrementa y lo actualiza en la interfaz.
  
    // 7. **Mostrar y cerrar el popup de soluci√≥n:**
    // Hay dos funciones adicionales (`showPopup` y `closePopup`) que se usan para mostrar y ocultar el popup con la soluci√≥n de un ejercicio.
    // El popup se muestra al quitar la clase `hidden` y se oculta al agregarla nuevamente.
  
    // 8. **Funci√≥n de "me gusta" repetida:**
    // Al final del c√≥digo, se agrega una segunda funci√≥n para incrementar el contador de "me gusta". 
    // Esta parte tambi√©n usa un `eventListener` para detectar el clic en los botones, pero parece ser redundante ya que ya est√° implementada antes. 
    // Esta parte podr√≠a ser eliminada para evitar duplicaci√≥n de c√≥digo.
    
   // **Resumen:**
  // Este c√≥digo permite a los usuarios publicar comentarios de manera segura, incrementando la interactividad con los botones de "me gusta" y "responder".
  // Adem√°s, el c√≥digo implementa medidas de seguridad para evitar ataques XSS y asegura que los comentarios no contengan contenido malicioso.
  // Los comentarios se crean din√°micamente en la p√°gina sin necesidad de recargarla, y el contador de "me gusta" se actualiza en tiempo real.
  
  const commentForm = document.getElementById('comment-form');
  const newComment = document.getElementById('new-comment');
  const forumContainer = document.querySelector('.forum-container');
  const popupMessage = document.getElementById('popup-message');

  // Funci√≥n para detectar XSS (b√°sica)
  function detectarXSS(texto) {
    const regexXSS = /<script.*?>.*?<\/script>/gi;
    if (regexXSS.test(texto)) {
      popupMessage.style.display = 'block';
      setTimeout(() => { popupMessage.style.display = 'none'; }, 3000);
      throw new Error("XSS detectado");
    }
  }

//Funci√≥n para escapar los caracteres especiales
  function escapeHTML(str) {
    return str.replace(/[&<>"']/g, function (match) {
      const escapeChars = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;'
      };
      return escapeChars[match];
    });
  }

//Funci√≥n para manejar la creaci√≥n del comentario
commentForm.addEventListener('submit', function (e) {
  e.preventDefault();
  const text = newComment.value.trim();

  console.log('Comentario:', text);  // Verifica el valor del comentario

  if (text !== "") {
    try {
      // Crear el comentario y agregarlo al contenedor
      const commentDiv = document.createElement('section');
      commentDiv.className = 'comment-box';

      // Crear la estructura HTML del comentario
      const userInfoDiv = document.createElement('div');
      userInfoDiv.className = 'user-info';
      const avatarImg = document.createElement('img');
      avatarImg.src = "https://i.imgur.com/1X4R6Yt.png";
      avatarImg.className = 'avatar';
      const usernameSpan = document.createElement('span');
      usernameSpan.className = 'username';
      usernameSpan.textContent = 'T√∫';
      const timeSpan = document.createElement('span');
      timeSpan.className = 'time';
      timeSpan.textContent = 'hace pocos segundos';

      userInfoDiv.appendChild(avatarImg);
      userInfoDiv.appendChild(usernameSpan);
      userInfoDiv.appendChild(document.createTextNode(' ‚Ä¢ '));
      userInfoDiv.appendChild(timeSpan);

      const commentTextP = document.createElement('p');
      commentTextP.className = 'comment-text';
      commentTextP.textContent = text;  // Usamos textContent para asegurar que el texto se muestre correctamente

      const commentActionsDiv = document.createElement('div');
      commentActionsDiv.className = 'comment-actions';
      const likeButton = document.createElement('button');
      likeButton.type = 'button';
      likeButton.innerHTML = 'üëç <span class="like-count">0</span>';
      const replyButton = document.createElement('button');
      replyButton.type = 'button';
      replyButton.textContent = 'Responder';

      commentActionsDiv.appendChild(likeButton);
      commentActionsDiv.appendChild(replyButton);

      commentDiv.appendChild(userInfoDiv);
      commentDiv.appendChild(commentTextP);
      commentDiv.appendChild(commentActionsDiv);

      forumContainer.appendChild(commentDiv);  // A√±adir el comentario al contenedor
      newComment.value = ""; // Limpiar campo de texto
    } catch (error) {
      console.warn("Comentario bloqueado:", error.message);
    }
  } else {
    console.warn("El comentario est√° vac√≠o.");
  }
});

  // Incrementar contador de likes
  forumContainer.addEventListener('click', function (e) {
    if (e.target.closest('button')) {
      const button = e.target.closest('button');
      const likeSpan = button.querySelector('.like-count');
      if (likeSpan) {
        let likeCount = parseInt(likeSpan.textContent);
        likeCount++;
        likeSpan.textContent = likeCount;
      }
    }
  });

// Mostrar el popup de soluci√≥n
function showPopup() {
document.getElementById("popup-solution").classList.remove("hidden");
}

//Cerrar el popup de soluci√≥n
function closePopup() {
document.getElementById("popup-solution").classList.add("hidden");
}

//Agregar la funcionalidad para aumentar el contador de "me gusta"
document.addEventListener('DOMContentLoaded', () => {
        const forumContainer = document.querySelector('.forum-container');

        forumContainer.addEventListener('click', function (e) {
            if (e.target.closest('button')) {
                const button = e.target.closest('button');
                const likeSpan = button.querySelector('.like-count');
                let likeCount = parseInt(likeSpan.textContent);

                likeCount++;
                likeSpan.textContent = likeCount;
            }
        });
    });
  </script>
</body>
</html>
