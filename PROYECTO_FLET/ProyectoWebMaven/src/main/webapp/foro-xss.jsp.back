<%@ page contentType="text/html; charset=UTF-8" language="java"%>
<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>Foro Hacker - Laboratorio XSS</title>
<style>
/* Fuente consola */
body {
	background-color: #0d1117;
	font-family: 'Courier New', monospace;
	color: #e6edf3;
	margin: 0;
	padding: 0;
	display: flex;
	flex-direction: column;
	height: 100vh;
}

/* HEADER estilo ventana */
.window-header {
	display: flex;
	justify-content: space-between;
	align-items: center;
	background: #161b22;
	border-bottom: 1px solid #30363d;
	padding: 10px 20px;
}

.title-bar {
	display: flex;
	align-items: center;
	gap: 15px;
}

.title-bar h1 {
	font-size: 1.2rem;
	color: #00ffcc;
}

.logo {
	width: 30px;
	height: 30px;
}

.window-controls {
	display: flex;
	gap: 10px;
}

.win-btn {
	background: #21262d;
	border: none;
	color: #e6edf3;
	width: 30px;
	height: 30px;
	font-size: 1rem;
	cursor: pointer;
	border-radius: 4px;
}

.win-btn:hover {
	background-color: #30363d;
}

/* COMENTARIOS */
.forum-container {
	padding: 20px;
	max-width: 800px;
	margin: auto;
	flex-grow: 1;
	overflow-y: auto;
}

.comment-box {
	background: #161b22;
	border: 1px solid #30363d;
	border-radius: 8px;
	padding: 15px;
	margin-bottom: 20px;
	width: 100%;
	box-sizing: border-box;
}

.user-info {
	display: flex;
	align-items: center;
	gap: 10px;
	font-size: 0.85rem;
	color: #8b949e;
	margin-bottom: 10px;
}

.avatar {
	width: 28px;
	height: 28px;
	border-radius: 50%;
}

.username {
	font-weight: bold;
	color: #58a6ff;
}

.comment-text {
	font-size: 0.95rem;
	margin-bottom: 10px;
}

.comment-actions button {
	background: none;
	border: none;
	color: #8b949e;
	cursor: pointer;
	font-size: 0.85rem;
	margin-right: 10px;
}

.comment-actions button:hover {
	color: #00ffcc;
}

/* BOT√ìN DE SOLUCI√ìN */
.solution-btn {
	position: fixed;
	bottom: 10px;
	left: 10px;
	background: radial-gradient(circle, #00ffcc, #0077ff);
	color: #000;
	border: none;
	font-size: 1.5rem;
	border-radius: 50%;
	width: 50px;
	height: 50px;
	cursor: pointer;
	box-shadow: 0 0 10px #00ffcc99;
	transition: transform 0.2s ease;
	z-index: 1000;
}

.solution-btn:hover {
	transform: scale(1.1);
}

/* POPUP */
.popup {
	position: fixed;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%) scale(1);
	background-color: #0d1117;
	border: 1px solid #30363d;
	border-radius: 10px;
	padding: 20px;
	width: 400px;
	max-width: 90%;
	z-index: 1000;
	font-family: 'Courier New', monospace;
	box-shadow: 0 0 15px #00ffcc4f;
	animation: popupFade 0.3s ease-in-out;
}

.popup-header {
	display: flex;
	justify-content: space-between;
	align-items: center;
	border-bottom: 1px solid #30363d;
	padding-bottom: 10px;
	margin-bottom: 15px;
}

.popup-header h2 {
	color: #00ffcc;
	font-size: 1.2rem;
}

.close-btn {
	background: none;
	border: none;
	color: #ff4d4d;
	font-size: 1.2rem;
	cursor: pointer;
}

.popup-content {
	color: #e6edf3;
	font-size: 0.95rem;
	margin-bottom: 20px;
}

.btn-solution {
	background: linear-gradient(90deg, #00ffcc, #0077ff);
	border: none;
	padding: 10px 20px;
	color: black;
	font-weight: bold;
	border-radius: 6px;
	cursor: pointer;
	text-transform: uppercase;
	transition: transform 0.2s ease;
}

.btn-solution:hover {
	transform: scale(1.05);
}

@
keyframes popupFade {from { opacity:0;
	transform: translate(-50%, -50%) scale(0.9);
}

to {
	opacity: 1;
	transform: translate(-50%, -50%) scale(1);
}

}
.hidden {
	display: none;
}

/* Barra de comentarios */
.comment-form {
	background-color: #161b22;
	padding: 15px;
	border-top: 1px solid #30363d;
	display: flex;
	align-items: center;
	gap: 10px;
	width: 100%; /* Contenedor padre al 100% */
	box-sizing: border-box; /* Para evitar el desbordamiento */
	z-index: 2;
	justify-content: center;
}

.comment-form input {
	width: 50%; /* Ajustado para ocupar solo el 50% del ancho */
	padding: 10px;
	background-color: #21262d;
	border: 1px solid #30363d;
	color: #e6edf3;
	border-radius: 5px;
	font-size: 1rem;
	box-sizing: border-box;
}

.comment-form button {
	background-color: #00ffcc;
	color: #000;
	border: none;
	padding: 10px;
	font-size: 1rem;
	border-radius: 5px;
	cursor: pointer;
}

.comment-form button:hover {
	background-color: #0077ff;
}

.comment-form button.solution-btn {
	background-color: #ffeb3b;
}

/* Ventana emergente tipo Google */
.popup-xss {
	position: fixed;
	top: 10px;
	left: 50%;
	transform: translateX(-50%);
	background-color: #21262d;
	color: #e6edf3;
	border: 1px solid #30363d;
	border-radius: 5px;
	padding: 15px;
	width: 80%;
	max-width: 500px;
	box-shadow: 0 0 15px rgba(0, 255, 204, 0.5);
	font-family: 'Courier New', monospace;
	z-index: 1000;
	display: none;
	text-align: center; /* Centrado horizontal */
}

.popup-xss h2 {
	font-size: 1rem;
	margin: 0;
}

.popup-xss p {
	margin: 10px 0;
	font-size: 1.2rem;
	font-weight: bold;
}

.popup-xss button {
	background: none;
	border: none;
	color: #ff4d4d;
	font-size: 1.5rem;
	cursor: pointer;
	position: absolute;
	top: 10px;
	right: 10px;
}

.popup-xss button:hover {
	color: #ff0000;
}
</style>
</head>
<body>
	<header class="window-header">
		<div class="title-bar">
			<img src="logo.png" alt="Logo" class="logo" />
			<h1 id="page-title">Reflejo XSS - Laboratorio</h1>
		</div>
		<div class="window-controls">
			<button class="win-btn minimize">‚Äî</button>
			<button class="win-btn maximize">‚ñ°</button>
			<button class="win-btn close">‚úï</button>
		</div>
	</header>

	<div class="forum-container">
		<%-- Comentarios precargados de ejemplo (puedes reemplazar por bucles de Java si se conecta a base de datos) --%>
		<section class="comment-box">
			<div class="user-info">
				<img src="https://i.imgur.com/1X4R6Yt.png" alt="Avatar"
					class="avatar" /> <span class="username">DevMaster</span> ‚Ä¢ <span
					class="time">hace 10 minutos</span>
			</div>
			<p class="comment-text">¬øAlguien tiene un ejemplo de XSS en una
				p√°gina en vivo?</p>
			<div class="comment-actions">
				<button type="button">
					üëç <span class="like-count">3</span>
				</button>
				<button>Responder</button>
			</div>
		</section>
		<section class="comment-box">
			<div class="user-info">
				<img src="https://i.imgur.com/1X4R6Yt.png" alt="Avatar"
					class="avatar" /> <span class="username">Admin</span> ‚Ä¢ <span
					class="time">hace 5 minutos</span>
			</div>
			<p class="comment-text">¬°Recuerden que deben tener cuidado al
				ejecutar c√≥digos de fuentes desconocidas!</p>
			<div class="comment-actions">
				<button type="button">
					üëç <span class="like-count">5</span>
				</button>
				<button>Responder</button>
			</div>
		</section>
		<section class="comment-box">
			<div class="user-info">
				<img src="https://i.imgur.com/1X4R6Yt.png" alt="Avatar"
					class="avatar" /> <span class="username">Hacker123</span> ‚Ä¢ <span
					class="time">hace 2 minutos</span>
			</div>
			<p class="comment-text">Me parece que esto se podr√≠a explotar de
				una forma m√°s eficiente... ü§î</p>
			<div class="comment-actions">
				<button type="button">
					üëç <span class="like-count">2</span>
				</button>
				<button>Responder</button>
			</div>
		</section>
		<section class="comment-box">
			<div class="user-info">
				<img src="https://i.imgur.com/1X4R6Yt.png" alt="Avatar"
					class="avatar" /> <span class="username">T√∫</span> ‚Ä¢ <span
					class="time">hace 1 minuto</span>
			</div>
			<p class="comment-text">¬°Qu√© interesante tema! üëÄ</p>
			<div class="comment-actions">
				<button type="button">
					üëç <span class="like-count">0</span>
				</button>
				<button>Responder</button>
			</div>

			<div id="comments-list"></div>


		</section>
	</div>

	<!-- Barra de comentarios -->
	<form id="comment-form" class="comment-form">
		<input type="text" id="new-comment"
			placeholder="Escribe tu comentario..." />
		<button type="submit">Comentar</button>
		<button class="solution-btn" type="button" onclick="showPopup()">üí°</button>
	</form>

	<!-- Popup de soluci√≥n -->
	<div id="popup-solution" class="popup hidden">
		<div class="popup-header">
			<h2>üí° Soluci√≥n</h2>
			<button class="close-btn" onclick="closePopup()">‚úñ</button>
		</div>
		<div class="popup-content">
			<p>Este ejercicio demuestra una vulnerabilidad XSS reflejada. Si
				el script inyectado se ejecuta al enviarlo, el sistema no est√°
				sanitizando la entrada.</p>
		</div>
		<button class="btn-solution" onclick="closePopup()">Cerrar</button>
	</div>

	<script>
	
	 //Este c√≥digo implementa un sistema b√°sico de comentarios en una p√°gina web,
	 //donde los usuarios pueden escribir y publicar comentarios, ver otros comentarios, 
	 //dar "me gusta" y detectar posibles ataques de tipo XSS (Cross Site Scripting).
	 
	 //Vamos a desglosar paso a paso lo que hace cada parte del c√≥digo.
	 
	 //1. **Selecci√≥n de elementos del DOM:**
	 // Se seleccionan los elementos de la p√°gina para poder interactuar con ellos:
    // `commentForm`: Selecciona el formulario donde los usuarios escriben y env√≠an sus comentarios.
    // `newComment`: Selecciona el campo de texto donde el usuario escribe su comentario.
    // `forumContainer`: Es el contenedor donde se agregan los comentarios que los usuarios publican.
    // `popupMessage`: Este elemento muestra un mensaje emergente (popup) cuando se detecta un ataque XSS.
  
  	//2. **Funci√≥n detectarXSS (Prevenci√≥n de ataques XSS):**
    // Esta funci√≥n se usa para detectar si el texto que el usuario quiere publicar contiene c√≥digo JavaScript malicioso (XSS).
    // Se utiliza una expresi√≥n regular (regexXSS) que busca las etiquetas `<script>...<script>`, que es el tipo com√∫n de ataque XSS.
    // Si se detecta c√≥digo malicioso, se muestra un mensaje emergente (`popupMessage`) que advierte al usuario, y se detiene el proceso de publicaci√≥n del comentario.
    
    //3. **Funci√≥n escapeHTML (Escapando caracteres especiales):**
    // Esta funci√≥n toma el texto del comentario y lo convierte a un formato seguro para evitar que se ejecute como c√≥digo HTML.
    // Los caracteres especiales como `&`, `<`, `>`, `"`, y `'` son reemplazados por sus representaciones de entidad HTML correspondientes, como `&amp;`, `&lt;`, `&gt;`, etc.
    // Esto es importante para evitar que los usuarios puedan insertar c√≥digo malicioso que se ejecute en el navegador de otros usuarios.
    
    //4. **Manejo del env√≠o del comentario:**
    // Se escucha el evento `submit` del formulario. Esto significa que cuando el usuario hace clic en el bot√≥n para enviar su comentario, se ejecutar√° esta parte del c√≥digo.
    // El evento `e.preventDefault()` evita que la p√°gina se recargue al enviar el formulario (comportamiento por defecto en los formularios HTML).
    // El texto del comentario se obtiene de `newComment.value.trim()`, y `trim()` elimina los espacios innecesarios al principio y al final del texto.
    // Si el texto del comentario no est√° vac√≠o, el c√≥digo pasa a crear un nuevo bloque de comentario en la p√°gina.
    
    // 5. **Creaci√≥n din√°mica de un comentario:**
    // Se crea un nuevo `section` (etiqueta HTML) que representar√° el comentario. Este `section` tiene una clase llamada 'comment-box' para que se pueda estilizar con CSS.
    // Luego, se crea una estructura HTML que incluye:
    //   - **Informaci√≥n del usuario:** Una imagen de avatar, el nombre de usuario (`T√∫`) y el tiempo de publicaci√≥n (en este caso, 'hace pocos segundos').
    //   - **Texto del comentario:** El contenido del comentario, que se inserta usando `textContent` para asegurar que se muestra como texto simple y no como c√≥digo HTML.
    //   - **Acciones del comentario:** Un par de botones, uno para dar "me gusta" y otro para responder.
    // Todos estos elementos se a√±aden a la estructura del comentario y luego se inserta dentro de `forumContainer`, que es donde se muestran los comentarios en la p√°gina.
  
    // 6. **Incremento del contador de "me gusta":**
    // Cada vez que un usuario hace clic en el bot√≥n de "me gusta" (representado por un pulgar hacia arriba `üëç`), el contador de "me gusta" aumenta en 1.
    // Esto se logra con un `eventListener` en el `forumContainer`, que escucha si se hace clic en alg√∫n bot√≥n.
    // Si el clic es en el bot√≥n de "me gusta", el c√≥digo obtiene el n√∫mero actual de "me gusta" (de la etiqueta `span` que contiene la clase `like-count`), lo incrementa y lo actualiza en la interfaz.
  
    // 7. **Mostrar y cerrar el popup de soluci√≥n:**
    // Hay dos funciones adicionales (`showPopup` y `closePopup`) que se usan para mostrar y ocultar el popup con la soluci√≥n de un ejercicio.
    // El popup se muestra al quitar la clase `hidden` y se oculta al agregarla nuevamente.
  
    // 8. **Funci√≥n de "me gusta" repetida:**
    // Al final del c√≥digo, se agrega una segunda funci√≥n para incrementar el contador de "me gusta". 
    // Esta parte tambi√©n usa un `eventListener` para detectar el clic en los botones, pero parece ser redundante ya que ya est√° implementada antes. 
    // Esta parte podr√≠a ser eliminada para evitar duplicaci√≥n de c√≥digo.
    
   // **Resumen:**
  // Este c√≥digo permite a los usuarios publicar comentarios de manera segura, incrementando la interactividad con los botones de "me gusta" y "responder".
  // Adem√°s, el c√≥digo implementa medidas de seguridad para evitar ataques XSS y asegura que los comentarios no contengan contenido malicioso.
  // Los comentarios se crean din√°micamente en la p√°gina sin necesidad de recargarla, y el contador de "me gusta" se actualiza en tiempo real.
  
  // `commentForm`: Selecciona el formulario de la p√°gina donde los usuarios escriben y env√≠an sus comentarios.
  const commentForm = document.getElementById('comment-form');
  //`newComment`: Selecciona el campo de texto en el que los usuarios escriben su comentario.
  const newComment = document.getElementById('new-comment');
  // `forumContainer`: Selecciona el contenedor donde se mostrar√°n todos los comentarios publicados por los usuarios.
  const forumContainer = document.querySelector('.forum-container');
  // `popupMessage`: Selecciona el mensaje emergente (popup) que se muestra cuando se detecta un posible ataque XSS o alg√∫n error en el comentario.
  const popupMessage = document.getElementById('popup-message');

  // Funci√≥n para detectar XSS (b√°sica)
  function detectarXSS(texto) {
	  // 1. `regexXSS`: Se define una expresi√≥n regular para buscar posibles etiquetas <script> que pueden ser utilizadas en ataques XSS.
    const regexXSS = /<script.*?>.*?<\/script>/gi;
 // 2. `if (regexXSS.test(texto))`: Se verifica si el texto proporcionado contiene c√≥digo JavaScript dentro de una etiqueta <script>, lo cual es un posible ataque XSS.
    if (regexXSS.test(texto)) {
    	// 3. `popupMessage.style.display = 'block';`: Si se detecta un ataque XSS, muestra un mensaje emergente (popup) para advertir al usuario.
      popupMessage.style.display = 'block';
      // 4. `setTimeout(() => { popupMessage.style.display = 'none'; }, 3000);`: Despu√©s de 3 segundos, oculta autom√°ticamente el popup.
      setTimeout(() => { popupMessage.style.display = 'none'; }, 3000);
   // 5. `throw new Error("XSS detectado");`: Lanza un error con el mensaje "XSS detectado", lo que detiene la ejecuci√≥n del c√≥digo en caso de que se detecte un ataque.
      throw new Error("XSS detectado");
    }
  }

//Funci√≥n para escapar los caracteres especiales
  function escapeHTML(str) {
	// 1. `str.replace(/[&<>"']/g, function (match) {...})`: Utiliza el m√©todo `replace` con una expresi√≥n regular que busca los caracteres especiales (&, <, >, ", ') dentro de la cadena `str`.
	  //    Esta expresi√≥n regular reemplaza todos los caracteres especiales por sus representaciones de entidad HTML para prevenir posibles problemas de seguridad (como XSS).
    return str.replace(/[&<>"']/g, function (match) {
    	// 2. `const escapeChars = {...}`: Se define un objeto `escapeChars` que mapea cada car√°cter especial a su entidad HTML correspondiente.
      const escapeChars = {
        '&': '&amp;', // El s√≠mbolo '&' se reemplaza por '&amp;'.
        '<': '&lt;', // El s√≠mbolo '<' se reemplaza por '&lt;'.
        '>': '&gt;', // El s√≠mbolo '>' se reemplaza por '&gt;'.
        '"': '&quot;',// El s√≠mbolo '"' se reemplaza por '&quot;'.
        "'": '&#39;'// El s√≠mbolo "'" se reemplaza por '&#39;'.
      };
   // 3. `return escapeChars[match];`: Devuelve el valor correspondiente al car√°cter encontrado (es decir, su entidad HTML) de acuerdo al objeto `escapeChars`.
      return escapeChars[match];
    });
  }

//Funci√≥n para manejar la creaci√≥n del comentario
  commentForm.addEventListener('submit', function (e) {
    
    // 1. `e.preventDefault();`: Evita que el formulario se env√≠e de forma tradicional (lo cual recargar√≠a la p√°gina). Esto es importante para evitar que la p√°gina se recargue al enviar el comentario.
    e.preventDefault();
    
    // 2. `const text = newComment.value.trim();`: Obtiene el texto que el usuario ha escrito en el campo de comentario (`newComment`), y usa `.trim()` para eliminar los espacios al principio y al final del texto.
    const text = newComment.value.trim();
    
    // 3. `console.log('Comentario:', text);`: Imprime el comentario en la consola del navegador para depuraci√≥n, verificando que el texto ingresado es el correcto.
    console.log('Comentario:', text);  // Verifica el valor del comentario

    // 4. `if (text !== "") {...}`: Comprueba si el comentario no est√° vac√≠o. Si el comentario tiene texto, entra en el bloque `if`, de lo contrario se salta.
    if (text !== "") {
      try {
        
        // 5. `const commentDiv = document.createElement('section');`: Crea un nuevo elemento `section`, que representar√° el bloque del comentario en la p√°gina.
        const commentDiv = document.createElement('section');
        commentDiv.className = 'comment-box';  // Asigna la clase CSS 'comment-box' al bloque para poder estilizarlo.

        // 6. Crear la estructura HTML del comentario:
        const userInfoDiv = document.createElement('div');
        userInfoDiv.className = 'user-info';  // Div para la informaci√≥n del usuario (avatar, nombre, tiempo).
        
        const avatarImg = document.createElement('img');
        avatarImg.src = "https://i.imgur.com/1X4R6Yt.png";  // Imagen de avatar del usuario.
        avatarImg.className = 'avatar';  // Asigna la clase CSS 'avatar' para estilizarla.
        
        const usernameSpan = document.createElement('span');
        usernameSpan.className = 'username';  // Clase para el nombre de usuario.
        usernameSpan.textContent = 'T√∫';  // Nombre de usuario fijo por ahora (podr√≠a ser din√°mico).
        
        const timeSpan = document.createElement('span');
        timeSpan.className = 'time';  // Clase para la visualizaci√≥n del tiempo del comentario.
        timeSpan.textContent = 'hace pocos segundos';  // Tiempo est√°tico, podr√≠a cambiar din√°micamente.

        // 7. Se agregan los elementos de avatar, nombre de usuario y tiempo al `userInfoDiv`.
        userInfoDiv.appendChild(avatarImg);
        userInfoDiv.appendChild(usernameSpan);
        userInfoDiv.appendChild(document.createTextNode(' ‚Ä¢ '));  // Separador visual.
        userInfoDiv.appendChild(timeSpan);

        // 8. `const commentTextP = document.createElement('p');`: Crea un elemento `p` para contener el texto del comentario.
        const commentTextP = document.createElement('p');
        commentTextP.className = 'comment-text';  // Asigna la clase CSS 'comment-text' al bloque de texto.
        commentTextP.textContent = text;  // Asigna el contenido del comentario al bloque `p` creado.

        // 9. Crear las acciones del comentario: botones de "me gusta" y "responder".
        const commentActionsDiv = document.createElement('div');
        commentActionsDiv.className = 'comment-actions';  // Clase para las acciones del comentario (botones).

        const likeButton = document.createElement('button');
        likeButton.type = 'button';  // Define el bot√≥n como un bot√≥n est√°ndar, no un bot√≥n de env√≠o.
        likeButton.innerHTML = 'üëç <span class="like-count">0</span>';  // Agrega el √≠cono de "me gusta" con un contador de 0.

        const replyButton = document.createElement('button');
        replyButton.type = 'button';  // Define el bot√≥n como un bot√≥n est√°ndar, no un bot√≥n de env√≠o.
        replyButton.textContent = 'Responder';  // Agrega el texto "Responder" al bot√≥n.

        // 10. Se agregan los botones de "me gusta" y "responder" al contenedor de acciones.
        commentActionsDiv.appendChild(likeButton);
        commentActionsDiv.appendChild(replyButton);

        // 11. Se agregan todos los elementos creados al contenedor del comentario (`commentDiv`).
        commentDiv.appendChild(userInfoDiv);  // Agregar la informaci√≥n del usuario.
        commentDiv.appendChild(commentTextP);  // Agregar el texto del comentario.
        commentDiv.appendChild(commentActionsDiv);  // Agregar las acciones (botones).

        // 12. Se agrega el nuevo bloque de comentario a `forumContainer` para que se muestre en la p√°gina.
        forumContainer.appendChild(commentDiv);

        // 13. Limpiar el campo de texto despu√©s de que el comentario ha sido enviado.
        newComment.value = ""; // Limpiar campo de texto

      } catch (error) {
        // 14. Si ocurre alg√∫n error al crear el comentario (por ejemplo, un error de JavaScript), se muestra un mensaje en la consola.
        console.warn("Comentario bloqueado:", error.message);
      }
    } else {
      // 15. Si el comentario est√° vac√≠o, se muestra un mensaje de advertencia en la consola.
      console.warn("El comentario est√° vac√≠o.");
    }
  });

//Incrementar contador de likes
  forumContainer.addEventListener('click', function (e) {
    
    // 1. `if (e.target.closest('button')) {`: Verifica si el clic fue realizado en un bot√≥n (si el objetivo del clic es un bot√≥n o un elemento dentro de un bot√≥n).
    //    `e.target` es el elemento donde ocurri√≥ el clic. `closest('button')` busca el primer ancestro que sea un bot√≥n (si el clic es dentro de un bot√≥n).
    if (e.target.closest('button')) {
      
      // 2. `const button = e.target.closest('button');`: Obtiene el bot√≥n que fue clickeado (el elemento m√°s cercano de tipo `button`).
      const button = e.target.closest('button');
      
      // 3. `const likeSpan = button.querySelector('.like-count');`: Busca dentro del bot√≥n el elemento `span` que contiene la clase `like-count`, donde se muestra el n√∫mero de "me gusta".
      const likeSpan = button.querySelector('.like-count');
      
      // 4. `if (likeSpan) {`: Verifica que el `span` con la clase `like-count` exista en el bot√≥n (es decir, que el bot√≥n sea el de "me gusta" y no otro tipo de bot√≥n).
      if (likeSpan) {
        
        // 5. `let likeCount = parseInt(likeSpan.textContent);`: Obtiene el n√∫mero de "me gusta" del `span`, lo convierte de texto a n√∫mero entero utilizando `parseInt()`.
        let likeCount = parseInt(likeSpan.textContent);
        
        // 6. `likeCount++;`: Incrementa el valor de `likeCount` en 1, aumentando el contador de "me gusta".
        likeCount++;
        
        // 7. `likeSpan.textContent = likeCount;`: Actualiza el contenido del `span` con el nuevo valor del contador, reflejando el incremento en la interfaz.
        likeSpan.textContent = likeCount;
      }
    }
  });


//Mostrar el popup de soluci√≥n
  function showPopup() {
    // 1. `document.getElementById("popup-solution").classList.remove("hidden");`: 
    //    Obtiene el elemento con el ID "popup-solution" (el popup de soluci√≥n) y elimina la clase "hidden" para hacer que el popup sea visible.
    document.getElementById("popup-solution").classList.remove("hidden");
  }

  // Cerrar el popup de soluci√≥n
  function closePopup() {
    // 2. `document.getElementById("popup-solution").classList.add("hidden");`: 
    //    Obtiene el elemento con el ID "popup-solution" y agrega la clase "hidden", ocultando el popup de soluci√≥n.
    document.getElementById("popup-solution").classList.add("hidden");
  }

  // Agregar la funcionalidad para aumentar el contador de "me gusta"
  document.addEventListener('DOMContentLoaded', () => {
    // 3. `const forumContainer = document.querySelector('.forum-container');`: 
    //    Obtiene el contenedor de los comentarios (el elemento con la clase "forum-container").
    const forumContainer = document.querySelector('.forum-container');

    // 4. `forumContainer.addEventListener('click', function (e) {`: 
    //    Agrega un "listener" (escuchador de eventos) para detectar los clics dentro del contenedor de los comentarios.
    forumContainer.addEventListener('click', function (e) {
      
      // 5. `if (e.target.closest('button')) {`: 
      //    Verifica si el clic se realiz√≥ dentro de un bot√≥n (utilizando `closest` para detectar si el clic ocurri√≥ dentro de un bot√≥n).
      if (e.target.closest('button')) {
        
        // 6. `const button = e.target.closest('button');`: 
        //    Obtiene el bot√≥n en el que se hizo clic, utilizando `closest` para asegurarse de que se trata de un bot√≥n (ya sea "me gusta" o cualquier otro).
        const button = e.target.closest('button');
        
        // 7. `const likeSpan = button.querySelector('.like-count');`: 
        //    Dentro del bot√≥n, busca el `span` con la clase `like-count`, que contiene el n√∫mero de "me gusta".
        const likeSpan = button.querySelector('.like-count');
        
        // 8. `let likeCount = parseInt(likeSpan.textContent);`: 
        //    Extrae el n√∫mero de "me gusta" desde el contenido del `span` y lo convierte en un n√∫mero entero utilizando `parseInt()`.
        let likeCount = parseInt(likeSpan.textContent);
        
        // 9. `likeCount++;`: 
        //    Incrementa el contador de "me gusta" en 1.
        likeCount++;
        
        // 10. `likeSpan.textContent = likeCount;`: 
        //    Actualiza el contenido del `span` con el nuevo valor del contador de "me gusta".
        likeSpan.textContent = likeCount;
      }
    });
  });
  </script>
</body>
</html>
